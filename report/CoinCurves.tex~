\documentclass[11pt]{llncs2e/llncs}
\usepackage{amsmath,amscd,amsfonts,amssymb,mathrsfs}
\usepackage{rotating}
\usepackage[english]{babel}
%\usepackage[latin1]{inputenc} % si WINDOWS
%\usepackage[utf8]{inputenc} % si LINUX
%\usepackage[T1]{fontenc}

\usepackage{graphicx}
%\usepackage[xetex]{graphicx}

\usepackage{slashbox}
\usepackage{multirow}

\addtolength{\hoffset}{-1cm}
\addtolength{\textwidth}{2cm} 
\addtolength{\voffset}{-2cm}
\addtolength{\textheight}{4cm} 


\usepackage{url}
\usepackage{algorithm}

%\usepackage{algorithm}
\usepackage[noend]{algorithmic}
%\usepackage{varioref}

\pagestyle{plain}

%\usepackage{array}
%\usepackage{amsmath}
%\usepackage{amsfonts}
%\usepackage{amssymb}

\usepackage{xcolor}
\usepackage{color}
\usepackage{hyperref}
\hypersetup{
    bookmarks=true,         % show bookmarks bar?
%    unicode=false,          % non-Latin characters in Acrobat's bookmarks
%    pdftoolbar=true,        % show Acrobat's toolbar?
%    pdfmenubar=true,        % show Acrobat's menu?
%    pdffitwindow=false,     % window fit to page when opened
%    pdfstartview={FitH},    % fits the width of the page to the window
    pdftitle={CoinCurves}, 
  % title
%    pdfauthor={Renaud Dubois and Aurore Guillevic and Marine Sengelin Le Breton}     % author
%    pdfsubject={Subject},   % subject of the document
%    pdfcreator={Creator},   % creator of the document
%    pdfproducer={Producer}, % producer of the document
%    pdfkeywords={keywords}, % list of keywords
%    pdfnewwindow=true,      % links in new window
%    colorlinks=true,        % false: boxed links; true: colored links
%    linkcolor=c12,          % color of internal links
%    citecolor=c25,          % color of links to bibliography
%    filecolor=c18,          % color of file links
%    urlcolor=c13            % color of external links
}

% \usepackage{tikz}
% \usetikzlibrary{shapes,arrows}
% \usetikzlibrary{positioning}
% \usetikzlibrary{positioning,shadows,backgrounds}
% \usetikzlibrary{trees}

\newcommand{\gray}[1]{\textcolor{gray}{#1}}
\newcommand{\lightgray}[1]{\textcolor{lightgray}{#1}}


\DeclareMathOperator*{\cat}{\parallel}
\newcommand{\hw}{\operatorname{\mathsf{H}}}
\newcommand{\pr}{\operatorname{P}}
\newcommand{\esp}{\operatorname{E}}
\newcommand{\cor}{\operatorname{Cor}}
\newcommand{\abs}[1]{\left|#1\right|}
\newcommand{\sep}{\;\vert\;}
\newcommand{\I}{\operatorname{I}}
\newcommand{\C}{\operatorname{\mathscr{C}}}
\newcommand{\X}{\mathfrak{S}}
\newcommand{\Y}{\mathfrak{S}'}

\newcommand{\NN}{\mathbb{N}}
\newcommand{\ZZ}{\mathbb{Z}}
\newcommand{\CC}{\mathbb{C}}

\newcommand{\G}{\mathbb{G}}

\newcommand{\PO}{\mathcal{O}}
\newcommand{\F}{{\mathbb{F}\!}}
\newcommand{\Fp}{\F_p}
\newcommand{\Fpk}{\F_{p^k}}
\newcommand{\Fr}{\F_r}

\newcommand{\Fq}{\F_q}

\newcommand{\PK}{\mbox{PK}}
\newcommand{\SK}{\mbox{SK}}

\newcommand{\added}[1]{\textbf{#1}}
\usepackage[normalem]{ulem}
%\sout{Texte a barrer}
%\xout{Texte a hachurer}
%\uwave{Texte a souligner par une vaguelette}
\newcommand{\removed}[1]{\sout{#1}}

% renaud.dubois@wanadoo.fr,guillevi@di.ens.fr,marine.sengelin@gmail.com

\begin{document}
\title{CoinCurves : Publicly Verifiable Randomness of Elliptic Parameters from block
chain unpredictability}
 
   \author{
    Anonymous\inst{1}}
  
   \institute{
%     Thales Communications and Security\\
%     160 Boulevard de Valmy -- BP 82\\
%     92704 Colombes Cedex -- France\\
%     firstname.lastname@thalesgroup.com
   }


\maketitle

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{abstract}

Trusted cryptosystem parameters generation is a critic concern since the Snowden Revelations.
In this paper we describe a method to  generate state of the art elliptic curve
parameters. We solve the following problems : generation for high security
level, customization of the parameters, security proof 
taking account of modern attacks while maintaining compatibility with the
existing standards. 

{\bf keywords:}{ Trusted Cryptosystems, CoinCurves, elliptic curves, NSA, Publicly Verifiable Randomness, kleptography}
\end{abstract}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}

Generating cryptographic trusted parameters is a long standing concern. It has became a major one since the Snowden revelations \cite{NYT}. The leaks suggest that NSA as sole editor of NIST standards was able to 
chose the constant parameters (elliptic points) such that the Dual EC-DRBG output become predictable.
%I do not trust constant. This should be true for any constant. 
Recently, results  about the constant of SHA-1 algorithm with "free start"
underline that no constant should never be set without an explanation to give confidence in results. Here the constant could have been set from an 
approved PRGN. This problem is a bit more complex for elliptic curve cryptography because there are constraints not easy to fulfill. 
Curves are chosen to have nearly prime order, which is not the average case. More criterias are described in \cite{SafeCurves}. One of those criterias is the rigidity,
which aims at restricting the capacity for the designer to chose a specific elliptic curve.
Here to choices arise :
\begin{itemize}
\item choosing a curve for maximum efficiency, letting no doubt for any of the parameters,
\item giving a full non ambiguous (rigid) description for family of curves.
\end{itemize}
A solution to first choice is to use a robust and curves like {\tt ec25519} \cite{Ecc25519} or {\tt Ted127-glv4} \cite{MicrosoftGLV4}.
The limitations with this solution are : 
\begin{itemize}
\item it limits the possibility to a single curve, which is dangerous if some vulnerability is found in the future,
\item it is not compatible with the FIPS Verifiable Randomness process described in \cite{ANSIX962}, 
\item whatever the efforts, for a paranoid user, there remains some variability about the underlying fields, and the very specific choice can always be discussed.
\end{itemize}
For the second choice, the way to provide a fully rigid description is not obvious. It relies in the use of a PRNG and a seed.
However the choice of the seed is always hard to justify. It could be a constant, but some may argue that many constants could be chosen (zero, pi, one, etc.).
In \cite{MillionDollar} the authors propose to use the results of many independant lotteries gathered together to build a seed to solve the problem of Verifiable Randomness.
While ingenious, the solution appears difficult to implement and verify. The specification set the security level to 128 bits. While sufficient for the current recommandation for civilian use, 
the solution should be scalable.
Implementing this solution appears to be incompatible with high security level. The generation of a random elliptic curve implies to compute the factorization of random values (meaningly $q-1$, and the CM-discriminant).
 For high security level the factorization of those values may take to long to enable the verification (current RSA factoring largest number remains RSA-768). 
We solve this problem by introducing a criteria of easyness of factorization.




\subsubsection{Our contribution}
We suggest to use the Bitcoin blockchain to provide a easy and quick to verify way to provide publicly verifiable random generator.
We also introduce a test to avoid to loop into hard factorization problems during the generation process, making the generation efficient. We provide a set of elliptic curves with various structures. 
We also introduce a feature of 'verifiable copyright' of the curve. The aim is to provide a way for a designer to introduce a license in the use of its elliptic curve. We provide an example of a curve 
integrating the LGPL in its construction. It can also be used by harware manufacturer to customize parameters for a client. 
A full implementation written in Magma Language is provided at the end of this article. It has been used to provide the example curves. The resulting parameters are compatible with X9.62 so that 
cryptographic implementation using those curves can obtain a FIPS certification.
 


\section{State of the Art}

\subsection{Trapping cryptosystems}

Kleptography has been introduced in \cite{Crypto96-89} where the authors describe a way to trap RSA key generation. Another concern is the capacity for a 
designer to trap domain parameters (an elliptic curve) so that a protocol build over this curve will be broken. In \cite{Teske}, Teske shows how a secret isogeny between a weak curve over $\mathbb{F}_{2^161}$ 
and an apparent safe one can be constructed. With the knowledge of the secret isogeny, the DLP is broken over the weak curve, without being noticed. In \cite{Magueule}, the authors invert the principle of 
the bug attack : knowing a secret rare bug, a secure curve is designed with a secret trapped exponent. The knowledge of the exponent enables the trapper to break static ECDH and ECKCDSA verification.

In \cite{Manipulate}, the authors describe how knowing a secret vulnerability with apparition probability of $2^{-\sigma}$, a designer can trap a standard. 
 An example is the twist security which has been discovered in \cite{FaultTwist}, long after the introduction of ECC. The scenario here is the opposite to the DES specification, where the Sbox differential properties are above random behavior, which indicates that IBM was aware of the attack before its publication. 
A non-negligible portion of traditionally secure  curves (before this article) are not twist-secure. With a computational effort of $O(2^\sigma)$, a designer can still respect the X9.62 pseudo-random procedure to generate a twist-insecure curve. Curves P224, ANSSI FRP256v1 and BrainPool256t1 are twist-insecure. The fact that the other curves of the same family (brainpoolP384t1, P256) don't fall in this category seems to indicate that the designer were not informed of this vulnerabily. This strongly advocate the fact that unkwnown attacks may still appear and that using hyper fast but non-switchable parameters is a high risk bet.



All those traps are possible if the designer is free to choose its curve. Following the 'nothing up my sleeves' principle, we describe a method to provide provably verifiable random curve.


\subsection{Security criteria}

To resist modern attacks, an elliptic curve must fulfill the following requirements :
\begin{itemize}
\item rho-security is related to the computational complexity of the elliptic curve discrete logarithm (ECDLP),
\item twist security is related to the computational complexity of the elliptic curve discrete logarithm (ECDLP) over the twist of the considered curve,
\item embedded degree is related to the infeasibility of transfers,
\item complex multiplication discriminant is related to.
\end{itemize}
Those criterias are mandatory. SafeCurve insists on other criterias that are linked to the representation of the curve.
 Today the standards are written to support Weierstrass representation. However it is possible to switch from one representation to another using the right isogeny,
with some additional conditions on the order of the curve $q$. We chose backward compatibility over performance, that's why  


\subsection{Publicly Verifiable Entropy Source}

In \cite{MillionDollar}, the author states that a PVES should verify the following properties :
\begin{itemize}
\item the ouput is unbiased,
\item the output rate is reliable,
\item the output is publicly reliable at any time,
\item the output is very hard to manipulate.
\end{itemize}

Then the author describe an ingenious yet complex method to build a PVES from many national lotteries. 


\subsection{Pseudo Random Curves}

A method to generate pseudo random curves is described in X9.62 \cite{ANSIX962}.
This method takes as input a Bitstring seed, and the prime field $\mathbb{F}_p$.
This method could be considered as 'semi-rigid', because if some vulnerability is known with a low but computable 
(say $O(2^{64})$), a saboter could iterate over the seed value until a week curve is found. (BadA55 example).
This process should also be updated to take into account the state of the art security criteria.
In \cite{BrainPool}, the same PRNG is used but using an explicit constant rather than a mysterious one.



\cite{MillionDollar} introduced the use of a PVES to build trusted cryptosystem parameters. 
The parameters of a cryptosystem must be set by following this process :
\begin{enumerate}
\item A designer specifies the generation process of the parameters, then the design is commited and timestamped,
\item A standardizer select a design, then pick a PVRS (Publicly Verifiable Random Seed), apply the method and publish the resulting parameters,
\item Users may at any time that the parameters have truly been set following the process.
\end{enumerate}



We submitted this paper for the submission deadline with examples. This paper and the code will not be modified.
We will use as seed the first blocks after the notification of the papers, which are unknown at the present moment.
During the latency, we will compute the ConfCoinCurves parameters. 
The method is valid and can be repeated as long as a commitment of code and ulterior PVS is done.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{The CoinCurve method}

\subsection{The BitCoin BlockChain as a practical PVES}

We state that the use of a robust blockchain such as BitCoin \cite{BitCoin} can provide a very practical PVES.
 Indeed using the Hash of given blocks of the Bitcoin is :
 
\begin{itemize}
\item unbiased as much as the output of the LSB of the hash function. The SHA function successfully passes all statistical tests.
\item reliable : the rate of BitCoin is one Hash every $10$ minutes,
\item publicly reliable : anyone can use a blockexplorer such as \cite{Blockexplorer} to check any given block,
\item hard to manipulate : the current difficulty of BitCoin is around $2^{72}$.
\end{itemize}

Compared to the \cite{MillionDollar} method, any user can easily get the parameters in a few clicks, while the process to extract and mesure the entropy from lotteries requires
 some work. The difficulty of the manipulation can also be measured. If a curve secret properties as probability $O(2^{-\sigma})$, then the computational power required to 
 insert a trapdoor is $O(2^{\sigma+\delta})$, which must be solved in only 10 minutes (the time between two blocks).



\subsection{Choices}

We sum up the possible choices when picking an elliptic curve :
\begin{itemize}
\item C1 : the underlying prime field shall be sparse or pseudo random,
\item C2 : the order of the curve shall be of the form q'=q or q'=4q depending if a classic weierstrass or Edwards form is chosen,
\item C3 : the coefficients of the curve shall be pseudo random, or be set to optimal values,
\end{itemize}

We made the following choices : we took as prime field for 256, 384 and 521 bits the same prime as the FIPS186-4 used 
to define the curve P192, P256 and P521. We took curves of prime order and set the coefficient $a=-3$. If one want to modify one of the choices,
then the code can be trivially modify to implement the required choice :
\begin{itemize}
\item choose the value of the prime p using the PRNG,
\item change the test {\tt IsPrime(q)} by {\tt IsPrime(q div 4) and ((q mod 4) eq 0)},
\item choose the value of coefficient a using the PRNG.
\end{itemize}



\subsection{Picking a verifiable seed}

We will generate two set of curves in the lifetime of this article :
\begin{itemize}
\item for the example we took the first HashBlock of the Bitcoin block chain after New Year,
\item this article will be commited during the review process, in the meantime, we will begin to compute a new curve with the two HashBlocks one day after the submission date
, i.e the first two blocks after 01/28/2018, at midnight.
\end{itemize}
If the article is accepted, the example curves will be replaced by the result of the code on the two new HashBlocks. Reviewers are encouraged to process the 
code by their own to check the compliance of the results. 

\subsection{Copyrighting the curve}

We suggest a practical enhancement. Instead of using directly the seed, the initial seed can also use a commited seed. 
This commited seed can be either a full license, or the hash of a license. This method enables one designer to protect its parameters by integrating the copyright in the curve itself.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{High security level and factorization}

The previous construction fulfill our initial requirements, however a problem arise for high security levels.
The computation of the embedded degree and CM-discriminant requires the factorization of random number. If one of this value is a RSA number, then
the factorization cannot be performed. Our experiments showed that for 512 bits security level (required for some military applications), the 
previous algorithm do not terminate in a practical time. For this reason we introduce a new criteria in the loop : the n-ecm factorizability.


We stress that the efficiency of the factorization is not important here, the aim is to find the better tradeoff so that a non ambiguous curve is
returned as fast as possible. To do so, a quick test to check if the three values can be easily factorized with ECM is performed. 
This means that potentially good curves are rejected by the algorithm, but as long as the designer and the verifier use the same algorithm, there is no 
way to exploit this trait.


\begin{note}
By chance all n-ecm tests have successed for P384 and P521. This allow to check the correctness of our magma X9.62 pseudo random generation : the code used to generate the CoinCurves 
using the NIST seeds produces the corresponding curves with $l=0$.
\end{note}

\section{Results}

\subsection{Example CoincurvesX-HNY2018}

The block used to generate CoinCurve256-HNY2108 (happy new year 2018) is the first hash of the year 2018. Its blockID is \#501951 and the hashvalue is
\\{\tt 00000000000000000039257d71f9f621ce483240c26813ff4001d48a1102571d}. No additional license text has been added.

\begin{table}
\begin{center}
\begin{tabular}{|c|c|}
\hline
Curve Name &  \\
\hline
\hline
CoinCurve256-HNY2018 & $p=2^{256}-2^{224}+2^{192}+2^{96}-1, a=-3$\\
 &$b=43920493166041626500678619494840853835571111165104496098733158508318439564527$\\
 &$q=115792089210356248762697446949407573529796177417823963211732800707150574968139$\\
 &$l=3129$\\
\hline
CoinCurve384-HNY2018 & $p=2^{384}-2^{128}-2^{96}+2^{32}-1, a=-3$\\
\hline
CoinCurve521-HNY2018 & $p=2^{521}-1, a=-3$\\
\hline
\end{tabular}
\end{center}
\caption{CoinCurves obtained by the described method before submission}
\end{table}

\subsection{Example CoincurvesX-ACNS2018}

The parameters for this curves will be computed using the first BitCoin hash after 01/28/2018:00h00.
 The conference acts as a commitment of the generating method. Reviewers are witnesses of the process.
Moreover the same code can still be used to generate further CoinCurves.



\begin{table}
\begin{center}
\begin{tabular}{|c|c|}
\hline
Curve Name &  \\
\hline
\hline
CoinCurve256-ACNS2018 & $p=2^{256}-2^{224}+2^{192}+2^{96}-1, a=-3$\\
 &$b,q,l=?$\\
\hline
CoinCurve384-ACNS2018 & $p=2^{384}-2^{128}-2^{96}+2^{32}-1, a=-3$\\
 &$b,q,l=?$\\
\hline
CoinCurve521-ACNS2018 & $p=2^{521}-1, a=-3$\\
 &$b,q,l=?$\\

\hline
\end{tabular}
\end{center}
\caption{CoinCurves obtained by the described method after acceptance}
\end{table}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Conclusion}

\appendix

\section{Magma Code}


\section{Example Curves}

\subsection{CoinCurve192}

\subsection{CoinCurve256}

\subsection{CoinCurve521}


% As affine coordinates are rarely used because of the high computational cost, this attack doesn't represent a real threat to cryptosystems. To do so the same work should be done, but the problems that we were not able 
% to solve is to find a multiple of a point such that the result is normalized.
% 
% Even so, 

\bibliographystyle{plain}
\bibliography{biblch}

\end{document}
